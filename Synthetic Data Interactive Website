<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Synthetic Data Explorer</title>
    <style>
        :root {
            --primary: #4338ca;
            --primary-light: #6366f1;
            --secondary: #10b981;
            --dark: #1e293b;
            --light: #f8fafc;
            --gray: #64748b;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: var(--light);
            color: var(--dark);
            line-height: 1.6;
        }
        
        header {
            background-color: var(--primary);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        section {
            margin-bottom: 3rem;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
        }
        
        h2 {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: var(--primary);
        }
        
        h3 {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            color: var(--primary-light);
        }
        
        p {
            margin-bottom: 1rem;
        }
        
        .btn {
            display: inline-block;
            background-color: var(--primary);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.25rem;
            text-decoration: none;
            font-weight: bold;
            transition: background-color 0.3s;
            cursor: pointer;
            border: none;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
        }
        
        .btn:hover {
            background-color: var(--primary-light);
        }
        
        .btn-secondary {
            background-color: var(--secondary);
        }
        
        .btn-secondary:hover {
            background-color: #34d399;
        }
        
        .card {
            background-color: white;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .flex {
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
        }
        
        .chart-container {
            height: 300px;
            margin: 2rem 0;
        }
        
        .use-case {
            flex: 1 1 300px;
        }
        
        .tabs {
            display: flex;
            border-bottom: 2px solid var(--gray);
            margin-bottom: 1rem;
        }
        
        .tab {
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            margin-bottom: -2px;
        }
        
        .tab.active {
            border-bottom: 2px solid var(--primary);
            color: var(--primary);
            font-weight: bold;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .generator-controls {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        input, select {
            padding: 0.5rem;
            border: 1px solid var(--gray);
            border-radius: 0.25rem;
            width: 100%;
            max-width: 300px;
        }
        
        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }
        
        .data-display {
            background-color: #f1f5f9;
            padding: 1rem;
            border-radius: 0.25rem;
            overflow-x: auto;
            font-family: monospace;
            white-space: pre;
        }
        
        footer {
            background-color: var(--dark);
            color: white;
            text-align: center;
            padding: 2rem;
            margin-top: 2rem;
        }
        
        .comparison-container {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .comparison-item {
            flex: 1 1 300px;
            padding: 1rem;
            border: 1px solid var(--gray);
            border-radius: 0.25rem;
        }
        
        @media (max-width: 768px) {
            h1 {
                font-size: 2rem;
            }
            
            h2 {
                font-size: 1.5rem;
            }
            
            .container {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>Synthetic Data Explorer</h1>
        <p>Understanding and Generating Synthetic Data for Machine Learning and Privacy</p>
    </header>
    
    <div class="container">
        <section id="introduction">
            <h2>What is Synthetic Data?</h2>
            <div class="card">
                <p>Synthetic data is artificially generated information that mimics real-world data. Unlike actual data collected from real events or people, synthetic data is created algorithmically using various statistical methods and machine learning techniques.</p>
                <p>The key advantage of synthetic data is that it preserves the statistical properties and patterns of real data while eliminating privacy concerns and potential biases. This makes it incredibly valuable for training AI models, testing software applications, and sharing information that would otherwise be restricted due to privacy regulations.</p>
            </div>
        </section>
        
        <section id="interactive-demo">
            <h2>Interactive Data Generator</h2>
            
            <div class="tabs">
                <div class="tab active" data-tab="tabular">Tabular Data</div>
                <div class="tab" data-tab="timeseries">Time Series</div>
                <div class="tab" data-tab="text">Text Data</div>
            </div>
            
            <div class="tab-content active" id="tabular">
                <div class="card">
                    <h3>Generate Synthetic Tabular Data</h3>
                    <p>Configure the parameters below to generate a synthetic dataset that resembles customer information.</p>
                    
                    <div class="generator-controls">
                        <div>
                            <label for="num-rows">Number of Rows:</label>
                            <input type="number" id="num-rows" min="1" max="100" value="10">
                        </div>
                        
                        <div>
                            <label for="include-age">Include Age:</label>
                            <select id="include-age">
                                <option value="yes">Yes</option>
                                <option value="no">No</option>
                            </select>
                        </div>
                        
                        <div>
                            <label for="include-income">Include Income:</label>
                            <select id="include-income">
                                <option value="yes">Yes</option>
                                <option value="no">No</option>
                            </select>
                        </div>
                    </div>
                    
                    <button class="btn" id="generate-tabular">Generate Data</button>
                    
                    <h3>Generated Data:</h3>
                    <div class="data-display" id="tabular-output">Your generated data will appear here...</div>
                </div>
            </div>
            
            <div class="tab-content" id="timeseries">
                <div class="card">
                    <h3>Generate Synthetic Time Series Data</h3>
                    <p>Configure the parameters below to generate synthetic stock price data.</p>
                    
                    <div class="generator-controls">
                        <div>
                            <label for="data-points">Number of Data Points:</label>
                            <input type="number" id="data-points" min="10" max="100" value="30">
                        </div>
                        
                        <div>
                            <label for="volatility">Volatility:</label>
                            <select id="volatility">
                                <option value="low">Low</option>
                                <option value="medium" selected>Medium</option>
                                <option value="high">High</option>
                            </select>
                        </div>
                        
                        <div>
                            <label for="trend">Trend:</label>
                            <select id="trend">
                                <option value="up">Upward</option>
                                <option value="flat" selected>Flat</option>
                                <option value="down">Downward</option>
                            </select>
                        </div>
                    </div>
                    
                    <button class="btn" id="generate-timeseries">Generate Data</button>
                    
                    <div class="chart-container" id="chart-container"></div>
                    
                    <h3>Generated Data:</h3>
                    <div class="data-display" id="timeseries-output">Your generated data will appear here...</div>
                </div>
            </div>
            
            <div class="tab-content" id="text">
                <div class="card">
                    <h3>Generate Synthetic Text Data</h3>
                    <p>Configure the parameters below to generate synthetic text data that resembles product reviews.</p>
                    
                    <div class="generator-controls">
                        <div>
                            <label for="review-count">Number of Reviews:</label>
                            <input type="number" id="review-count" min="1" max="10" value="3">
                        </div>
                        
                        <div>
                            <label for="sentiment">Sentiment:</label>
                            <select id="sentiment">
                                <option value="positive">Positive</option>
                                <option value="mixed" selected>Mixed</option>
                                <option value="negative">Negative</option>
                            </select>
                        </div>
                        
                        <div>
                            <label for="product-type">Product Type:</label>
                            <select id="product-type">
                                <option value="electronics">Electronics</option>
                                <option value="clothing">Clothing</option>
                                <option value="food">Food</option>
                            </select>
                        </div>
                    </div>
                    
                    <button class="btn" id="generate-text">Generate Data</button>
                    
                    <h3>Generated Text:</h3>
                    <div class="data-display" id="text-output">Your generated text will appear here...</div>
                </div>
            </div>
        </section>
        
        <section id="use-cases">
            <h2>Common Use Cases for Synthetic Data</h2>
            
            <div class="flex">
                <div class="card use-case">
                    <h3>AI and Machine Learning</h3>
                    <p>Synthetic data allows AI practitioners to augment limited real data with synthetic samples, helping models generalize better. It's particularly valuable when real data is scarce, imbalanced, or difficult to collect.</p>
                    <button class="btn learn-more" data-section="ai">Learn More</button>
                </div>
                
                <div class="card use-case">
                    <h3>Privacy and Compliance</h3>
                    <p>Industries like healthcare and finance can use synthetic data to share information without exposing personal identifiable information (PII), helping them comply with regulations like GDPR and HIPAA.</p>
                    <button class="btn learn-more" data-section="privacy">Learn More</button>
                </div>
                
                <div class="card use-case">
                    <h3>Testing and Development</h3>
                    <p>Software developers use synthetic data to test applications thoroughly without using production data, ensuring that systems work correctly before deployment while avoiding security risks.</p>
                    <button class="btn learn-more" data-section="testing">Learn More</button>
                </div>
            </div>
        </section>
        
        <section id="comparison">
            <h2>Real vs. Synthetic Data</h2>
            
            <div class="comparison-container">
                <div class="comparison-item">
                    <h3>Real Data</h3>
                    <ul>
                        <li>Collected from actual events, people or systems</li>
                        <li>Contains genuine patterns and anomalies</li>
                        <li>May have privacy concerns and legal restrictions</li>
                        <li>Often contains biases and missing values</li>
                        <li>Limited in quantity and expensive to collect</li>
                    </ul>
                </div>
                
                <div class="comparison-item">
                    <h3>Synthetic Data</h3>
                    <ul>
                        <li>Algorithmically generated to mimic real data</li>
                        <li>Preserves statistical properties of the original data</li>
                        <li>Free from privacy concerns</li>
                        <li>Can be designed to eliminate biases</li>
                        <li>Unlimited in quantity and cost-effective</li>
                    </ul>
                </div>
            </div>
        </section>
        
        <section id="methods">
            <h2>Generation Methods</h2>
            
            <div class="card">
                <h3>Statistical Approaches</h3>
                <p>These methods rely on statistical modeling to capture and reproduce the distributions, correlations, and other properties of real data. Techniques include:</p>
                <ul>
                    <li><strong>Parametric methods:</strong> Fitting data to known probability distributions</li>
                    <li><strong>Copulas:</strong> Capturing dependencies between variables</li>
                    <li><strong>Monte Carlo simulations:</strong> Generating random samples based on specified rules</li>
                </ul>
            </div>
            
            <div class="card">
                <h3>Machine Learning Approaches</h3>
                <p>These methods use advanced AI models to learn and replicate the patterns in real data:</p>
                <ul>
                    <li><strong>Generative Adversarial Networks (GANs):</strong> Two neural networks compete to generate realistic data</li>
                    <li><strong>Variational Autoencoders (VAEs):</strong> Neural networks that learn compressed representations</li>
                    <li><strong>Diffusion Models:</strong> Gradually adding and removing noise to generate realistic samples</li>
                    <li><strong>Transformer-based models:</strong> Using attention mechanisms to generate structured data</li>
                </ul>
            </div>
        </section>
        
        <section id="challenges">
            <h2>Challenges and Limitations</h2>
            
            <div class="card">
                <h3>Quality and Fidelity</h3>
                <p>Ensuring synthetic data truly represents the complexity and nuances of real data remains challenging. Poor quality synthetic data can lead to models that perform well in testing but fail when deployed with real data.</p>
            </div>
            
            <div class="card">
                <h3>Privacy Concerns</h3>
                <p>Even synthetic data can sometimes leak information about the original dataset, especially with certain generation methods. Advanced techniques like differential privacy can help mitigate these risks.</p>
            </div>
            
            <div class="card">
                <h3>Validation and Evaluation</h3>
                <p>Determining how well synthetic data represents real data requires sophisticated evaluation metrics and validation methods. This remains an active area of research.</p>
            </div>
        </section>
        
        <section id="resources">
            <h2>Resources and Tools</h2>
            
            <div class="card">
                <h3>Popular Synthetic Data Tools</h3>
                <ul>
                    <li><strong>SDV (Synthetic Data Vault):</strong> An open-source Python library for generating synthetic tabular data</li>
                    <li><strong>Synthea:</strong> A synthetic patient generator for healthcare data</li>
                    <li><strong>CTGAN:</strong> A GAN-based approach specifically designed for tables with mixed data types</li>
                    <li><strong>Gretel:</strong> A platform offering synthetic data generation with privacy guarantees</li>
                    <li><strong>TensorFlow Privacy:</strong> Tools for training machine learning models with privacy</li>
                </ul>
            </div>
        </section>
    </div>
    
    <footer>
        <p>Synthetic Data Explorer | Created with ❤️ for GitHub</p>
        <p>© 2025 | An educational resource</p>
    </footer>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script>
        // Tab functionality
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', () => {
                const tabId = tab.getAttribute('data-tab');
                
                // Update active tab
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // Update visible content
                document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
                document.getElementById(tabId).classList.add('active');
            });
        });
        
        // Learn more functionality
        document.querySelectorAll('.learn-more').forEach(button => {
            button.addEventListener('click', () => {
                const section = button.getAttribute('data-section');
                alert(`More information about ${section} use cases for synthetic data would be displayed in a modal or new page in a full implementation.`);
            });
        });
        
        // Generate tabular data
        document.getElementById('generate-tabular').addEventListener('click', () => {
            const numRows = parseInt(document.getElementById('num-rows').value);
            const includeAge = document.getElementById('include-age').value === 'yes';
            const includeIncome = document.getElementById('include-income').value === 'yes';
            
            const firstNames = ['John', 'Jane', 'Michael', 'Emma', 'James', 'Olivia', 'William', 'Sophia', 'Benjamin', 'Isabella'];
            const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Miller', 'Davis', 'Garcia', 'Rodriguez', 'Wilson'];
            const cities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose'];
            
            let data = [];
            
            for (let i = 0; i < numRows; i++) {
                const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
                const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
                
                let person = {
                    id: i + 1,
                    firstName: firstName,
                    lastName: lastName,
                    email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@example.com`,
                    city: cities[Math.floor(Math.random() * cities.length)]
                };
                
                if (includeAge) {
                    person.age = Math.floor(Math.random() * 50) + 18;
                }
                
                if (includeIncome) {
                    person.annualIncome = Math.floor(Math.random() * 150000) + 30000;
                }
                
                data.push(person);
            }
            
            document.getElementById('tabular-output').textContent = JSON.stringify(data, null, 2);
        });
        
        // Generate time series data
        let timeSeriesChart = null;
        
        document.getElementById('generate-timeseries').addEventListener('click', () => {
            const dataPoints = parseInt(document.getElementById('data-points').value);
            const volatility = document.getElementById('volatility').value;
            const trend = document.getElementById('trend').value;
            
            // Set volatility factor
            let volatilityFactor;
            switch (volatility) {
                case 'low': volatilityFactor = 0.03; break;
                case 'medium': volatilityFactor = 0.07; break;
                case 'high': volatilityFactor = 0.12; break;
                default: volatilityFactor = 0.07;
            }
            
            // Set trend factor
            let trendFactor;
            switch (trend) {
                case 'up': trendFactor = 0.01; break;
                case 'flat': trendFactor = 0; break;
                case 'down': trendFactor = -0.01; break;
                default: trendFactor = 0;
            }
            
            // Generate time series data
            let price = 100; // Starting price
            let dates = [];
            let prices = [];
            let data = [];
            
            for (let i = 0; i < dataPoints; i++) {
                const date = new Date();
                date.setDate(date.getDate() - (dataPoints - i));
                
                // Random walk with trend
                const change = price * (trendFactor + (Math.random() - 0.5) * volatilityFactor);
                price += change;
                
                // Ensure price doesn't go below 1
                price = Math.max(price, 1);
                
                const formattedDate = date.toISOString().split('T')[0];
                dates.push(formattedDate);
                prices.push(price.toFixed(2));
                
                data.push({
                    date: formattedDate,
                    price: parseFloat(price.toFixed(2))
                });
            }
            
            // Display data
            document.getElementById('timeseries-output').textContent = JSON.stringify(data, null, 2);
            
            // Create or update chart
            const ctx = document.getElementById('chart-container');
            
            if (timeSeriesChart) {
                timeSeriesChart.destroy();
            }
            
            timeSeriesChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [{
                        label: 'Stock Price',
                        data: prices,
                        fill: false,
                        borderColor: '#4338ca',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });
        });
        
        // Generate text data
        document.getElementById('generate-text').addEventListener('click', () => {
            const reviewCount = parseInt(document.getElementById('review-count').value);
            const sentiment = document.getElementById('sentiment').value;
            const productType = document.getElementById('product-type').value;
            
            // Sample text templates based on product type and sentiment
            const templates = {
                electronics: {
                    positive: [
                        "I absolutely love this gadget! The battery life is amazing and it's so easy to use.",
                        "This is the best electronic device I've purchased in years. Fast, reliable, and looks great.",
                        "Exceeded my expectations in every way. The features are intuitive and it's built to last.",
                        "Fantastic product with excellent build quality. Would definitely recommend to anyone.",
                        "This device changed my life! So many useful features and the performance is outstanding."
                    ],
                    mixed: [
                        "Good product overall, but the battery life could be better. Still worth the price though.",
                        "Nice design and functionality, but the user manual is confusing. Took me a while to figure it out.",
                        "Works well for what I need, though I wish it had more features. Decent value for money.",
                        "Solid performance but runs a bit hot. Customer service was helpful when I reached out.",
                        "Quality product with a few minor flaws. The interface could be more user-friendly."
                    ],
                    negative: [
                        "Disappointing purchase. Stopped working after just two weeks of normal use.",
                        "Wouldn't recommend this product. Poor battery life and the build quality feels cheap.",
                        "Save your money and look elsewhere. This device is slow and unreliable.",
                        "Had to return this item. It didn't perform as advertised and customer service was unhelpful.",
                        "One of the worst electronics purchases I've made. Constantly glitches and overheats."
                    ]
                },
                clothing: {
                    positive: [
                        "Perfect fit and very comfortable! The material is high quality and feels luxurious.",
                        "Love this clothing item! Gets lots of compliments whenever I wear it.",
                        "Exactly what I was looking for. The color is vibrant and it's well-made.",
                        "Absolutely worth every penny. Versatile, stylish, and comfortable for all-day wear.",
                        "This has become my favorite piece in my wardrobe. Excellent design and quality."
                    ],
                    mixed: [
                        "Nice design but runs a bit small. Order a size up if you're considering this.",
                        "Good quality fabric but the color is slightly different than pictured.",
                        "Comfortable clothing item, though the stitching could be better in some places.",
                        "Decent for the price, but it shrank a bit after washing. Still wearable though.",
                        "Stylish design but not as durable as I hoped. Showing wear after a few months."
                    ],
                    negative: [
                        "Poor quality clothing. The seams started coming apart after just one wash.",
                        "Very disappointed with this purchase. The sizing is way off and the material feels cheap.",
                        "Would not recommend. The color faded immediately and it's uncomfortable to wear.",
                        "Complete waste of money. Poorly made and nothing like the pictures online.",
                        "Had to return this. The fabric was itchy and the design looked nothing like the photos."
                    ]
                },
                food: {
                    positive: [
                        "Delicious flavor! Will definitely be ordering this again. Perfect balance of taste.",
                        "One of the best food products I've tried. Fresh, flavorful, and high quality.",
                        "Amazing taste and arrived perfectly packaged. My whole family loved it!",
                        "Exceeded my expectations! Great texture and flavor - a new pantry staple.",
                        "Fantastic product that tastes homemade. Will be stocking up on this!"
                    ],
                    mixed: [
                        "Good flavor but a bit pricey for what you get. Might buy again on sale.",
                        "Decent taste overall, though not as fresh as I expected. Packaging is excellent.",
                        "Some items in the package were great, others were just okay. Worth trying once.",
                        "Nice flavor but doesn't quite live up to the description. Still enjoyable though.",
                        "Good product but shipping took longer than expected. Arrived in good condition."
                    ],
                    negative: [
                        "Very disappointed with the taste. Nothing like described and seemed stale.",
                        "Would not purchase again. Bland flavor and poor quality ingredients.",
                        "Save your money. This product was nearly inedible and overpriced.",
                        "Had to throw this away. The taste was off and it didn't seem fresh at all.",
                        "One of the worst food items I've ordered online. Poor quality and taste."
                    ]
                }
            };
            
            // Determine which templates to use
            let reviewPool;
            if (sentiment === 'mixed') {
                reviewPool = [...templates[productType].positive, ...templates[productType].mixed, ...templates[productType].negative];
            } else {
                reviewPool = templates[productType][sentiment];
            }
            
            // Generate reviews
            let reviews = [];
            for (let i = 0; i < reviewCount; i++) {
                // Get random rating based on sentiment
                let rating;
                if (sentiment === 'positive') {
                    rating = Math.floor(Math.random() * 2) + 4; // 4-5 stars
                } else if (sentiment === 'negative') {
                    rating = Math.floor(Math.random() * 2) + 1; // 1-2 stars
                } else {
                    rating = Math.floor(Math.random() * 5) + 1; // 1-5 stars
                }
                
                // Get random user name
                const firstNames = ['John', 'Jane', 'Michael', 'Emma', 'James', 'Olivia', 'William', 'Sophia'];
                const lastNames = ['S.', 'J.', 'W.', 'B.', 'M.', 'D.', 'G.', 'R.'];
                const userName = `${firstNames[Math.floor(Math.random() * firstNames.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]}`;
                
                // Get random date
                const date = new Date();
                date.setDate(date.getDate() - Math.floor(Math.random() * 60));
                const formattedDate = date.toISOString().split('T')[0];
                
                // Get random text
                const reviewText = reviewPool[Math.floor(Math.random() * reviewPool.length)];
                
                reviews.push({
                    username: userName,
                    date: formattedDate,
                    rating: rating,
                    text: reviewText
                });
            }
            
            document.getElementById('text-output').textContent = JSON.stringify(reviews, null, 2);
        });
        
        // Initialize with some default data
        document.getElementById('generate-tabular').click();
        document.getElementById('generate-timeseries').click();
        document.getElementById('generate-text').click();
    </script>
</body>
</html>
